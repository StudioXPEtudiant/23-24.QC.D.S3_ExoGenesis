{% comment %}
// Copyright 2020 Visual Design Cafe. All rights reserved.
// This shader was created using ShaderX, a shader framework by Visual Design Cafe.
// https://www.visualdesigncafe.com/shaderx

// Package: Nature Shaders
// Website: https://www.visualdesigncafe.com/nature-shaders
// Documentation: https://support.visualdesigncafe.com/hc/categories/900000043503
{% endcomment %}

Shader "Hidden/NatureOverlay"
{
    Properties
    { 
         _MainTex ("Texture", 2D) = "white" {}
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" }
        LOD 100
        
        CGINCLUDE
            #include "UnityCG.cginc"

            float3 _Offset;
            sampler2D _MainTex;
            sampler2D _ColorTex;
            float _SampleColorTexture;
            UNITY_INSTANCING_BUFFER_START(Props)
                UNITY_DEFINE_INSTANCED_PROP(float4, _Color)
            UNITY_INSTANCING_BUFFER_END(Props)

            struct appdata
            {
                float4 vertex : POSITION;
                float4 uv : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            struct v2f
            {
                float4 vertex : SV_POSITION;
                float4 uv : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
            };

            v2f vert (appdata v)
            {
                v2f o;
				UNITY_SETUP_INSTANCE_ID (v);
                UNITY_TRANSFER_INSTANCE_ID (v, o);
                o.vertex = UnityObjectToClipPos(v.vertex);
                o.uv = v.uv;
                return o;
            }

            half4 frag (v2f i) : SV_Target
            {
				UNITY_SETUP_INSTANCE_ID (i);
                float4 color = 
                    lerp(
                        UNITY_ACCESS_INSTANCED_PROP(Props, _Color), 
                        tex2D(_ColorTex, i.uv.xy), 
                        _SampleColorTexture);

                float4 tex = tex2D(_MainTex, i.uv.xy);
                color.rgb = lerp(float3(1,1,1), color.rgb, tex.r);
                color.a = lerp(1, color.a, tex.g);
                return color;
            }
        ENDCG

        Pass
        {
            ZWrite Off
            ZTest Always
            Cull Back
            Blend DstColor Zero
            ColorMask RGBA

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
			#pragma multi_compile_instancing
            ENDCG
        }

        Pass
        {
            ZWrite Off
            ZTest Always
            Cull Back
            Blend DstColor Zero
            ColorMask RGB

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
			#pragma multi_compile_instancing
            ENDCG
        }

        Pass
        {
            ZWrite Off
            ZTest Always
            Cull Back
            Blend DstColor Zero
            ColorMask A

            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
			#pragma multi_compile_instancing
            ENDCG
        }
    }
}
